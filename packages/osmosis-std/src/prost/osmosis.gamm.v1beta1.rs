/// Parameters for changing the weights in a balancer pool smoothly from
/// a start weight and end weight over a period of time.
/// Currently, the only smooth change supported is linear changing between
/// the two weights, but more types may be added in the future.
/// When these parameters are set, the weight w(t) for pool time `t` is the
/// following:
///   t <= start_time: w(t) = initial_pool_weights
///   start_time < t <= start_time + duration:
///     w(t) = initial_pool_weights + (t - start_time) *
///       (target_pool_weights - initial_pool_weights) / (duration)
///   t > start_time + duration: w(t) = target_pool_weights
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SmoothWeightChangeParams {
    /// The start time for beginning the weight change.
    /// If a parameter change / pool instantiation leaves this blank,
    /// it should be generated by the state_machine as the current time.
    #[prost(message, optional, tag = "1")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Duration for the weights to change over
    #[prost(message, optional, tag = "2")]
    pub duration: ::core::option::Option<::prost_types::Duration>,
    /// The initial pool weights. These are copied from the pool's settings
    /// at the time of weight change instantiation.
    /// The amount PoolAsset.token.amount field is ignored if present,
    /// future type refactorings should just have a type with the denom & weight
    /// here.
    #[prost(message, repeated, tag = "3")]
    pub initial_pool_weights: ::prost::alloc::vec::Vec<PoolAsset>,
    /// The target pool weights. The pool weights will change linearly with respect
    /// to time between start_time, and start_time + duration. The amount
    /// PoolAsset.token.amount field is ignored if present, future type
    /// refactorings should just have a type with the denom & weight here.
    ///
    /// Intermediate variable for the 'slope' of pool weights. This is equal to
    /// (target_pool_weights - initial_pool_weights) / (duration)
    /// TODO: Work out precision, and decide if this is good to add
    /// repeated PoolAsset poolWeightSlope = 5 [
    ///  (gogoproto.moretags) = "yaml:\"pool_weight_slope\"",
    ///  (gogoproto.nullable) = false
    /// ];
    #[prost(message, repeated, tag = "4")]
    pub target_pool_weights: ::prost::alloc::vec::Vec<PoolAsset>,
}
impl crate::cosmwasm::ToCosmosMsg for SmoothWeightChangeParams {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.SmoothWeightChangeParams";
}
/// PoolParams defined the parameters that will be managed by the pool
/// governance in the future. This params are not managed by the chain
/// governance. Instead they will be managed by the token holders of the pool.
/// The pool's token holders are specified in future_pool_governor.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolParams {
    #[prost(string, tag = "1")]
    pub swap_fee: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exit_fee: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub smooth_weight_change_params: ::core::option::Option<SmoothWeightChangeParams>,
}
impl crate::cosmwasm::ToCosmosMsg for PoolParams {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.PoolParams";
}
/// Pool asset is an internal struct that combines the amount of the
/// token in the pool, and its balancer weight.
/// This is an awkward packaging of data,
/// and should be revisited in a future state migration.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolAsset {
    /// Coins we are talking about,
    /// the denomination must be unique amongst all PoolAssets for this pool.
    #[prost(message, optional, tag = "1")]
    pub token: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// Weight that is not normalized. This weight must be less than 2^50
    #[prost(string, tag = "2")]
    pub weight: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for PoolAsset {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.PoolAsset";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pool {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub id: u64,
    #[prost(message, optional, tag = "3")]
    pub pool_params: ::core::option::Option<PoolParams>,
    /// This string specifies who will govern the pool in the future.
    /// Valid forms of this are:
    /// {token name},{duration}
    /// {duration}
    /// where {token name} if specified is the token which determines the
    /// governor, and if not specified is the LP token for this pool.duration is
    /// a time specified as 0w,1w,2w, etc. which specifies how long the token
    /// would need to be locked up to count in governance. 0w means no lockup.
    /// TODO: Further improve these docs
    #[prost(string, tag = "4")]
    pub future_pool_governor: ::prost::alloc::string::String,
    /// sum of all LP tokens sent out
    #[prost(message, optional, tag = "5")]
    pub total_shares: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
    /// These are assumed to be sorted by denomiation.
    /// They contain the pool asset and the information about the weight
    #[prost(message, repeated, tag = "6")]
    pub pool_assets: ::prost::alloc::vec::Vec<PoolAsset>,
    /// sum of all non-normalized pool weights
    #[prost(string, tag = "7")]
    pub total_weight: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for Pool {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.Pool";
}
/// ===================== MsgJoinPool
/// This is really MsgJoinPoolNoSwap
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgJoinPool {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(string, tag = "3")]
    pub share_out_amount: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub token_in_maxs: ::prost::alloc::vec::Vec<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl crate::cosmwasm::ToCosmosMsg for MsgJoinPool {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgJoinPool";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgJoinPoolResponse {}
impl crate::cosmwasm::ToCosmosMsg for MsgJoinPoolResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgJoinPoolResponse";
}
/// ===================== MsgExitPool
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgExitPool {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(string, tag = "3")]
    pub share_in_amount: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub token_out_mins: ::prost::alloc::vec::Vec<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl crate::cosmwasm::ToCosmosMsg for MsgExitPool {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgExitPool";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgExitPoolResponse {}
impl crate::cosmwasm::ToCosmosMsg for MsgExitPoolResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgExitPoolResponse";
}
/// ===================== MsgSwapExactAmountIn
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapAmountInRoute {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
    #[prost(string, tag = "2")]
    pub token_out_denom: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for SwapAmountInRoute {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.SwapAmountInRoute";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSwapExactAmountIn {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub routes: ::prost::alloc::vec::Vec<SwapAmountInRoute>,
    #[prost(message, optional, tag = "3")]
    pub token_in: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    #[prost(string, tag = "4")]
    pub token_out_min_amount: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for MsgSwapExactAmountIn {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgSwapExactAmountIn";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSwapExactAmountInResponse {
    #[prost(string, tag = "1")]
    pub token_out_amount: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for MsgSwapExactAmountInResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgSwapExactAmountInResponse";
}
/// ===================== MsgSwapExactAmountOut
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapAmountOutRoute {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
    #[prost(string, tag = "2")]
    pub token_in_denom: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for SwapAmountOutRoute {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.SwapAmountOutRoute";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSwapExactAmountOut {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub routes: ::prost::alloc::vec::Vec<SwapAmountOutRoute>,
    #[prost(string, tag = "3")]
    pub token_in_max_amount: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub token_out: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
impl crate::cosmwasm::ToCosmosMsg for MsgSwapExactAmountOut {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgSwapExactAmountOut";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSwapExactAmountOutResponse {
    #[prost(string, tag = "1")]
    pub token_in_amount: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for MsgSwapExactAmountOutResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgSwapExactAmountOutResponse";
}
/// ===================== MsgJoinSwapExternAmountIn
/// TODO: Rename to MsgJoinSwapExactAmountIn
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgJoinSwapExternAmountIn {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(message, optional, tag = "3")]
    pub token_in: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// repeated cosmos.base.v1beta1.Coin tokensIn = 5 [
    ///   (gogoproto.moretags) = "yaml:\"tokens_in\"",
    ///   (gogoproto.nullable) = false
    /// ];
    #[prost(string, tag = "4")]
    pub share_out_min_amount: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for MsgJoinSwapExternAmountIn {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgJoinSwapExternAmountIn";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgJoinSwapExternAmountInResponse {
    #[prost(string, tag = "1")]
    pub share_out_amount: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for MsgJoinSwapExternAmountInResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgJoinSwapExternAmountInResponse";
}
/// ===================== MsgJoinSwapShareAmountOut
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgJoinSwapShareAmountOut {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(string, tag = "3")]
    pub token_in_denom: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub share_out_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub token_in_max_amount: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for MsgJoinSwapShareAmountOut {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgJoinSwapShareAmountOut";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgJoinSwapShareAmountOutResponse {
    #[prost(string, tag = "1")]
    pub token_in_amount: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for MsgJoinSwapShareAmountOutResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgJoinSwapShareAmountOutResponse";
}
/// ===================== MsgExitSwapShareAmountIn
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgExitSwapShareAmountIn {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(string, tag = "3")]
    pub token_out_denom: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub share_in_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub token_out_min_amount: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for MsgExitSwapShareAmountIn {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgExitSwapShareAmountInResponse {
    #[prost(string, tag = "1")]
    pub token_out_amount: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for MsgExitSwapShareAmountInResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgExitSwapShareAmountInResponse";
}
/// ===================== MsgExitSwapExternAmountOut
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgExitSwapExternAmountOut {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(message, optional, tag = "3")]
    pub token_out: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    #[prost(string, tag = "4")]
    pub share_in_max_amount: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for MsgExitSwapExternAmountOut {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgExitSwapExternAmountOut";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgExitSwapExternAmountOutResponse {
    #[prost(string, tag = "1")]
    pub share_in_amount: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for MsgExitSwapExternAmountOutResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.MsgExitSwapExternAmountOutResponse";
}
///=============================== Pool
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
}
impl crate::cosmwasm::ToCosmosMsg for QueryPoolRequest {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QueryPoolRequest";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolResponse {
    #[prost(message, optional, tag = "1")]
    pub pool: ::core::option::Option<::prost_types::Any>,
}
impl crate::cosmwasm::ToCosmosMsg for QueryPoolResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QueryPoolResponse";
}
///=============================== Pools
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolsRequest {
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl crate::cosmwasm::ToCosmosMsg for QueryPoolsRequest {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QueryPoolsRequest";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolsResponse {
    #[prost(message, repeated, tag = "1")]
    pub pools: ::prost::alloc::vec::Vec<::prost_types::Any>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl crate::cosmwasm::ToCosmosMsg for QueryPoolsResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QueryPoolsResponse";
}
///=============================== NumPools
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryNumPoolsRequest {}
impl crate::cosmwasm::ToCosmosMsg for QueryNumPoolsRequest {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QueryNumPoolsRequest";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryNumPoolsResponse {
    #[prost(uint64, tag = "1")]
    pub num_pools: u64,
}
impl crate::cosmwasm::ToCosmosMsg for QueryNumPoolsResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QueryNumPoolsResponse";
}
///=============================== PoolParams
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolParamsRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
}
impl crate::cosmwasm::ToCosmosMsg for QueryPoolParamsRequest {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QueryPoolParamsRequest";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<::prost_types::Any>,
}
impl crate::cosmwasm::ToCosmosMsg for QueryPoolParamsResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QueryPoolParamsResponse";
}
///=============================== PoolLiquidity
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalPoolLiquidityRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
}
impl crate::cosmwasm::ToCosmosMsg for QueryTotalPoolLiquidityRequest {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QueryTotalPoolLiquidityRequest";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalPoolLiquidityResponse {
    #[prost(message, repeated, tag = "1")]
    pub liquidity: ::prost::alloc::vec::Vec<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl crate::cosmwasm::ToCosmosMsg for QueryTotalPoolLiquidityResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QueryTotalPoolLiquidityResponse";
}
///=============================== TotalShares
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalSharesRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
}
impl crate::cosmwasm::ToCosmosMsg for QueryTotalSharesRequest {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QueryTotalSharesRequest";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalSharesResponse {
    #[prost(message, optional, tag = "1")]
    pub total_shares: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl crate::cosmwasm::ToCosmosMsg for QueryTotalSharesResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QueryTotalSharesResponse";
}
/// QuerySpotPriceRequest defines the gRPC request structure for a SpotPrice
/// query.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySpotPriceRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
    #[prost(string, tag = "2")]
    pub base_asset_denom: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub quote_asset_denom: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for QuerySpotPriceRequest {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QuerySpotPriceRequest";
}
/// QuerySpotPriceResponse defines the gRPC response structure for a SpotPrice
/// query.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySpotPriceResponse {
    /// String of the Dec. Ex) 10.203uatom
    #[prost(string, tag = "1")]
    pub spot_price: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for QuerySpotPriceResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QuerySpotPriceResponse";
}
///=============================== EstimateSwapExactAmountIn
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySwapExactAmountInRequest {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(string, tag = "3")]
    pub token_in: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub routes: ::prost::alloc::vec::Vec<SwapAmountInRoute>,
}
impl crate::cosmwasm::ToCosmosMsg for QuerySwapExactAmountInRequest {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QuerySwapExactAmountInRequest";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySwapExactAmountInResponse {
    #[prost(string, tag = "1")]
    pub token_out_amount: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for QuerySwapExactAmountInResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QuerySwapExactAmountInResponse";
}
///=============================== EstimateSwapExactAmountOut
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySwapExactAmountOutRequest {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(message, repeated, tag = "3")]
    pub routes: ::prost::alloc::vec::Vec<SwapAmountOutRoute>,
    #[prost(string, tag = "4")]
    pub token_out: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for QuerySwapExactAmountOutRequest {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QuerySwapExactAmountOutRequest";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySwapExactAmountOutResponse {
    #[prost(string, tag = "1")]
    pub token_in_amount: ::prost::alloc::string::String,
}
impl crate::cosmwasm::ToCosmosMsg for QuerySwapExactAmountOutResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QuerySwapExactAmountOutResponse";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalLiquidityRequest {}
impl crate::cosmwasm::ToCosmosMsg for QueryTotalLiquidityRequest {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QueryTotalLiquidityRequest";
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalLiquidityResponse {
    #[prost(message, repeated, tag = "1")]
    pub liquidity: ::prost::alloc::vec::Vec<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl crate::cosmwasm::ToCosmosMsg for QueryTotalLiquidityResponse {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.QueryTotalLiquidityResponse";
}
/// Params holds parameters for the incentives module
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    #[prost(message, repeated, tag = "1")]
    pub pool_creation_fee: ::prost::alloc::vec::Vec<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl crate::cosmwasm::ToCosmosMsg for Params {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.Params";
}
/// GenesisState defines the gamm module's genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(message, repeated, tag = "1")]
    pub pools: ::prost::alloc::vec::Vec<::prost_types::Any>,
    #[prost(uint64, tag = "2")]
    pub next_pool_number: u64,
    #[prost(message, optional, tag = "3")]
    pub params: ::core::option::Option<Params>,
}
impl crate::cosmwasm::ToCosmosMsg for GenesisState {
    const TYPE_URL: &'static str = "/osmosis.gamm.v1beta1.GenesisState";
}
