{"version":3,"file":"index.umd.min.js","sources":["../src/contracts/OsmosisStargateContract.ts"],"sourcesContent":["/**\n* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the cosmwasm-typescript-gen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin, StdFee } from \"@cosmjs/amino\";\nexport type ExecuteMsg = {\n  create_denom: {\n    initial_mint?: string | null;\n    initial_pool?: InitPoolCfg | null;\n    subdenom: string;\n    [k: string]: unknown;\n  };\n};\nexport interface InitPoolCfg {\n  exit_fee: string;\n  pairing_denom: string;\n  pool_assets: PoolAssests;\n  swap_fee: string;\n  [k: string]: unknown;\n}\nexport interface PoolAssests {\n  new_token_amount: string;\n  new_token_weight: string;\n  pairing_token_amount: string;\n  pairing_token_weight: string;\n  [k: string]: unknown;\n}\nexport interface InstantiateMsg {\n  [k: string]: unknown;\n}\nexport type QueryMsg = string;\nexport interface OsmosisStargateReadOnlyInterface {\n  contractAddress: string;\n}\nexport class OsmosisStargateQueryClient implements OsmosisStargateReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n  }\n\n}\nexport interface OsmosisStargateInterface extends OsmosisStargateReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  createDenom: ({\n    initialMint,\n    initialPool,\n    subdenom\n  }: {\n    initialMint?: string;\n    initialPool?: InitPoolCfg;\n    subdenom: string;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n}\nexport class OsmosisStargateClient extends OsmosisStargateQueryClient implements OsmosisStargateInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.createDenom = this.createDenom.bind(this);\n  }\n\n  createDenom = async ({\n    initialMint,\n    initialPool,\n    subdenom\n  }: {\n    initialMint?: string;\n    initialPool?: InitPoolCfg;\n    subdenom: string;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      create_denom: {\n        initial_mint: initialMint,\n        initial_pool: initialPool,\n        subdenom\n      }\n    }, fee, memo, funds);\n  };\n}"],"names":["OsmosisStargateQueryClient","client","contractAddress","this","OsmosisStargateClient","_super","sender","_this","call","createDenom","_a","fee","memo","funds","initialMint","initialPool","subdenom","execute","create_denom","initial_mint","initial_pool","_b","bind","__extends"],"mappings":";;;;;gxDAqCA,IAAAA,EAIE,SAAYC,EAAwBC,GAClCC,KAAKF,OAASA,EACdE,KAAKD,gBAAkBA,CACxB,EAgBHE,EAAA,SAAAC,GAKE,SAAAD,EAAYH,EAA+BK,EAAgBJ,GAA3D,IAAAK,EACEF,EAAMG,KAAAL,KAAAF,EAAQC,IAKfC,YAEDI,EAAWE,YAAG,SAAOC,EAQlBC,EAAwCC,EAAeC,GAPxD,IAAAC,gBACAC,EAAWL,EAAAK,YACXC,EAAQN,EAAAM,qBAKP,IAAAL,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAMR,KAAKF,OAAOgB,QAAQd,KAAKG,OAAQH,KAAKD,gBAAiB,CAClEgB,aAAc,CACZC,aAAcL,EACdM,aAAcL,EACdC,SAAQA,IAETL,EAAKC,EAAMC,IANd,KAAA,EAAA,MAAA,CAAA,EAAOQ,kBAfPd,EAAKN,OAASA,EACdM,EAAKD,OAASA,EACdC,EAAKL,gBAAkBA,EACvBK,EAAKE,YAAcF,EAAKE,YAAYa,KAAKf,IAC1C,CAmBH,0PA9B2CgB,CAA0BnB,EAAAC,GA8BpED,CAAD,CA9BA,CAA2CJ"}